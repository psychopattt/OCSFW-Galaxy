// Generated code

#if !DEBUG
#include "Shaders/ShaderProvider/ShaderProvider.h"
const string ShaderProvider::UnpackCode(const uint32_t& h) {
switch (h) {
case 1939412094: return "#version 460 core\nin vec2 fragmentTextureCoords;uniform sampler2D dataTexture;out vec4 color;void main()\n{\ncolor=texture(dataTexture, fragmentTextureCoords);}\n";
case 776390504: return "#version 460 core\nin vec4 position;in vec2 vertexTextureCoords;out vec2 fragmentTextureCoords;void main()\n{\ngl_Position=position; fragmentTextureCoords=vertexTextureCoords;}\n";
case 1285147531: return "#version 460 core\nlayout(local_size_x=8, local_size_y=8, local_size_z=1) in;uniform int width;uniform int height;uniform uint seed;layout(RGBA32F) restrict uniform image2D dataTexture;uint Random(uint state)\n{\nstate ^= 2747636419; state *= 2654435769; state ^= state >> 16; state *= seed + 1; state *= 2654435769; state ^= state >> 16; state *= 2654435769; return state;}\nvec4 GetNeighborAverage(ivec2 position)\n{\nvec4 colorAverage=vec4(0); for (int y=-1; y < 2; y++)\n{\nfor (int x=-1; x < 2; x++)\n{\nivec2 neighborPos=ivec2(position.x + x, position.y + y); colorAverage += imageLoad(dataTexture, neighborPos); }\n}\nreturn colorAverage / 9.0f;}\nfloat GetColorAverage(vec4 color)\n{\nreturn (color.x + color.y + color.z) / 3.0f;}\nvoid RefreshSource(ivec2 position, uint state)\n{\nfloat uintMax=4294967295.0f; uint r=Random(state); uint g=Random(r); uint b=Random(g); imageStore(dataTexture, position, vec4(\nr / uintMax, g / uintMax, b / uintMax, 1.0f\n));}\nvoid UpdatePixel(ivec2 position)\n{\nvec4 neighborAverage=GetNeighborAverage(position); float colorAverage=GetColorAverage(neighborAverage); if (colorAverage > 0.01f)\n{\nvec4 multiplier=vec4(vec3(1.0005f), 1.0f); if (colorAverage < 0.75f)\n{\nfor (int i=0; i < 3; i++)\n{\nif (neighborAverage[i] > 0.9f)\nmultiplier[i]=1.05f; }\n}\nimageStore(dataTexture, position, neighborAverage * multiplier); }\n}\nvoid main()\n{\nivec2 position=ivec2(gl_GlobalInvocationID.xy); if (position.x >= width || position.y >= height)\nreturn; uint state=Random(position.y * width + position.x); bool isSource=state < 20000000; if (isSource)\nRefreshSource(position, state); else\nUpdatePixel(position);}\n";
default: return ""; }}
#endif
